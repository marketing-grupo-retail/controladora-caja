\/* TIME STAMP BLOCK ***************************************************
\** END OF TIME STAMP BLOCK *******************************************/
\/******************************************************************/
\/*                                                                */
\/*      MODULE NAME: EAMMCRD1.J86                                 */
\/*                                                                */
\/*      DESCRIPTIVE NAME: Modified version of EAMEXCHR.J86 for    */
\/*                        Controller pgms.                        */
\/*                                                                */
\/*      COPYRIGHT:                                                */
\/*      5696-536 THIS MODULE IS "RESTRICTED MATERIALS OF IBM"     */
\/*      (C) COPYRIGHT IBM CORP 1986, 1993 ALL RIGHTS RESERVED     */
\/*      LICENSED MATERIALS - PROPERTY OF IBM REFER TO COPYRIGHT   */
\/*      INSTRUCTIONS FORM NUMBER G120-2083                        */
\/*                                                                */
\/*      This module attempts to read the file "EAMCDESC.DAT"      */
\/*      which contains the Multiple Currency Descriptors and      */
\/*      the Exchange Rate File.                                   */
\/*                                                                */
\/*      If the file is NOT found, the application will act as     */
\/*         if the feature is NOT installed.                       */
\/*                                                                */
\/*      AUTHOR: Ralph D. Gustafson                                */
\/*                                                                */
\/*      CHANGE HISTORY:                                           */
\/*      20 April 1998   Initial Version                           */
\/*                                                                */
\/*  IR38497 - Bring Module up to coding standards.                */
\/*            RDG IBM 26Oct98                                     */
\/*                                                                */
\/*  IR40090 - Modify code to store currency number as 4 digits.   */
\/*            RSH MGVA 17Mar99                                    */
\/*                                                                */
\/*  IR40235 - Avoid altering the DESC.READ flag.                  */
\/*            RSH MGVA 01Apr99                                    */
\/*                                                                */
\/*  IR43567 Add code to change the format of the Foreign Exchange */
\/*          Rate file to 512 byte record length Direct file.      */
\/*          CMJ MGVA 16Aug2000                                    */
\/*                                                                */
\/*  IR43663 Correct problem in read of the Foreign Exhcange Rate  */
\/*          file by setting the number of currencies defined      */
\/*          into the FCER.ARR$ array.                             */
\/*          CMJ MGVA 23Aug2000                                    */
\/*                                                                */
\/* END-OF-SPECIFICATIONS ******************************************/

 RF.SESS% = 64                                   ! using IO session 64
 EAMEXISO.PROCESSED = 0                          ! reset EAMEXISO processed flag
 EAMEXCHG.PROCESSED = 0                          ! reset EAMCDESC processed flag
 FIELD.ERROR = 0                                 ! reset field error flag
 MC.ENABLED = 0                                  ! reset MC Feature flag
 FILE.NAME$ = ""                                 ! file name for opens & sizes
 CLOSE RF.SESS%                                  ! ensure session is closed
 NUM.DESCS = 100                                 ! set initial descriptors cnt


!*****************************************************************************
!*                                                                           *
!*   This section attempts to read the file "EAMEXISO" file and puts the     *
!*  information away in the MC.ISO.ARR$ array.                               *
!*                                                                           *
!*****************************************************************************
!

 EOF.DETECTED = 0                                ! reset End Of File detected

 FILE.NAME$ = "EAMEXISO"                         ! file to open

 TS.TS11.WERR$ = ""                              ! set error work variable
 TS.ER.RETURN = -1                               ! set user will handle flag

 OPEN FILE.NAME$ AS RF.SESS% NOWRITE NODEL       ! Get MC ISO Definition File
 IF NOT(TS.ER.RETURN) THEN BEGIN                 ! if error detected
   GOTO MC.DONE                                  ! exit
 ENDIF                                           ! error detected
 EAMEXISO.PRESENT = -1                           ! set ISO present flag
 MC.ENABLED = -1                                 ! set feature flag on
 RD.ISO.FILE = -1                                ! set read ISO file flag on
 RD.FIRST.LINE = -1                              ! set read first line flag on

 FC.TEMP1$ = ""                                  ! reset work string
 ERROR.TYPE$ = ""                                ! reset error type string
 TS.TS11.WERR$ = ""                              ! set error work variable
 TS.ER.RETURN = -1                               ! set user will handle flag
 WHILE TS.ER.RETURN                              ! while no error detected

   READ #RF.SESS%; LINE FC.TEMP1$                ! Read ISO FILE LINE

   IF TS.ER.RETURN THEN BEGIN                    ! if no error detected

     IF EAMEXISO.PROCESSED = -1 THEN BEGIN       ! if ISO count captured
       RD.FIRST.LINE = 0                         ! Reset Variable
     ENDIF                                       ! ISO count captured

     IF (LEFT$(FC.TEMP1$, 1) <> "!") AND         \ If NOT a Remark line
      (LEFT$(FC.TEMP1$, 1) <> "\") AND           \ and NOT a blank line
      (FC.TEMP1$ <> "") THEN BEGIN               !

       FIELD.ERROR = 0                           ! field error flag

       FLD.START = 1                             ! set field start pointer
       FLD.END = MATCH(",", FC.TEMP1$, FLD.START)! set field end pointer

       IF FLD.END THEN BEGIN                     ! If field end
         FLD.LEN = (FLD.END -2) - FLD.START      ! Adjust pointer
       ENDIF ELSE BEGIN                          ! else find end of line
         FLD.END = MATCH(" ", FC.TEMP1$,         \ look for a blank
                         FLD.START)              !
         IF FLD.END THEN BEGIN                   ! If blank found
           FLD.LEN = (FLD.END -2) - FLD.START    ! Adjust pointer
         ENDIF ELSE BEGIN                        ! otherwise if no blank found
           FLD.END = EOL                         ! Use End of Line as Fld End
           FLD.LEN = (FLD.END -1) - FLD.START    ! Adjust pointer
         ENDIF                                   ! blank found
         IF FLD.END = 0 THEN BEGIN               ! if no field end found
           ERROR.TYPE$ = "RI0"                   ! Set Record Type error
           RD.EXCHG.FILE = 0                     ! Reset Flag
           FIELD.ERROR = -1                      ! Missing ending Comma
         ENDIF                                   ! no field end found
       ENDIF                                     ! field end

       IF (FIELD.ERROR = 0) AND                  \ if no field error
        (RD.FIRST.LINE) THEN BEGIN               ! if read first line flag set
         NUM.ISO$ = MID$(FC.TEMP1$,              \ Remove double quotes from
                         FLD.START +1, FLD.LEN)  !  string.
         NUM.ISO% = INT%(VAL(NUM.ISO$))          ! make into an integer

         IF LEN(NUM.ISO$) = 0 THEN BEGIN         ! if no ISO number found
           ERROR.TYPE$ = "900"                   ! Set Record 90, Field 0 error
           RD.ISO.FILE = 0                       ! Hard error, must exit
           ERROR.TYPE = 99                       ! set the error type
           MC.ENABLED = 0                        ! if MC feature not active
         ENDIF ELSE BEGIN                        ! else if ISO number found
           DIM MC.ISO.ARR$(NUM.ISO%, 3)          ! Initialize ISO array
           MC.ISO.ARR$(0,0) = "0"                ! Set Element Count
           EAMEXISO.PROCESSED = -1               ! Set Processed flag
         ENDIF                                   ! ISO number found
       ENDIF                                     ! no fld error & rd 1st line
       IF (FIELD.ERROR = 0) AND                  \ if no field error yet and
        (RD.FIRST.LINE = 0) THEN BEGIN           ! read first line not set

         SLOT = VAL(MC.ISO.ARR$(0,0)) + 1        ! Find next open position

         FLD.START = 1                           ! set field start pointer
         FLD.END = MATCH(",", FC.TEMP1$,         \ find the field end
                         FLD.START)              ! find the field end

         IF FLD.END THEN BEGIN                   ! If field end
           FLD.LEN = (FLD.END -2) - FLD.START    ! Adjust pointer
         ENDIF ELSE BEGIN                        ! else use blank or EOL
           FLD.END = MATCH(" ", FC.TEMP1$,       \ look for a blank
                           FLD.START)            !
           IF FLD.END THEN BEGIN                 ! If blank found
             FLD.LEN = (FLD.END -2) - FLD.START  ! Adjust pointer
           ENDIF ELSE BEGIN                      ! otherwise if blank not found
             FLD.END = EOL                       ! Use End of Line as Field End
             FLD.LEN = (FLD.END -1) - FLD.START  ! Adjust pointer
           ENDIF                                 ! blank found
           IF FLD.END = 0 THEN BEGIN             ! if still no field end found
             ERROR.TYPE$ = "901"                 ! Set Record 90, Field 1 error
             RD.ISO.FILE = 0                     ! Hard error, must exit
             FIELD.ERROR = -1                    ! set field error flag
           ENDIF                                 ! still no field end
         ENDIF                                   ! use blank or EOL

         IF FIELD.ERROR = 0 THEN BEGIN           ! if no field error yet
           CMCICODE$ = MID$(FC.TEMP1$,           \ Country Monetary Currency ID
                            FLD.START +1,        \ Remove double quotes from
                            FLD.LEN)             !  string

           IF CMCICODE$ <> "" THEN BEGIN         ! if CMCI code found
             MC.ISO.ARR$(0,0) = STR$(SLOT)       ! Set Position taken
             MC.ISO.ARR$(SLOT, 1) = RIGHT$("  " +\ Put away
                                    CMCICODE$,3) !
           ENDIF ELSE BEGIN                      ! else if no CMCI code found
             ERROR.TYPE$ = "901"                 ! Set Record 90, Field 1 error
             RD.ISO.FILE = 0                     ! Hard error, must exit
             FIELD.ERROR = -1                    ! goto try next ISO record
           ENDIF                                 ! CMCI code found

           IF FIELD.ERROR = 0 THEN BEGIN         ! if no field error yet
             FLD.START = FLD.END + 1             ! set field start pointer
             FLD.END = MATCH(",", FC.TEMP1$,     \ find field end
                             FLD.START)          !

             IF FLD.END THEN BEGIN               ! If field end
               FLD.LEN = (FLD.END -2)            \ Adjust pointer
                       - FLD.START               !
             ENDIF ELSE BEGIN                    ! else use blank or EOL
               FLD.END = MATCH(" ", FC.TEMP1$,   \ look for blank in line
                               FLD.START)        !
               IF FLD.END THEN BEGIN             ! If blank found
                 FLD.LEN = (FLD.END -2)          \ Adjust pointer
                         - FLD.START             ! Adjust pointer
               ENDIF ELSE BEGIN                  ! otherwise if not blank
                 FLD.END = EOL                   ! Use End of Line as Fld End
                 FLD.LEN = (FLD.END -1)          \ Adjust pointer
                         - FLD.START             ! Adjust pointer
               ENDIF                             ! blank found
               IF FLD.END = 0 THEN BEGIN         ! if field end not found
                 ERROR.TYPE$ = "902"             ! Set Record 90, Field 2 error
                 RD.ISO.FILE = 0                 ! Hard error, must exit
                 FIELD.ERROR = -1                ! set field error flag
               ENDIF                             ! field end not found
             ENDIF                               ! field end
           ENDIF                                 ! no field error yet
         ENDIF                                   ! field end found

         IF FIELD.ERROR = 0 THEN BEGIN           ! if no field error
           CURR.NUM$ = MID$(FC.TEMP1$,           \ get currency number
                            FLD.START +1,        \ Remove double quotes from
                            FLD.LEN)             !  string.
           IF LEN(CURR.NUM$) = 0 THEN BEGIN      ! if no currency number found
             ERROR.TYPE$ = "902"                 ! Set Record 90, Field 2 error
             RD.ISO.FILE = 0                     ! Hard error, must exit
             FIELD.ERROR = -1                    ! set field error flag on
           ENDIF ELSE BEGIN                      ! else if currency number found
!AIR40090
             CURR.NUM$ = RIGHT$("0000" +         \ Normalize Currency number
                                CURR.NUM$,4)     !
!EIR40090
             MC.ISO.ARR$(SLOT, 2) = CURR.NUM$    ! Set curr num into array

             FLD.START = FLD.END + 1             ! set field start pointer
             FLD.END = MATCH(",", FC.TEMP1$,     \ find field end
                             FLD.START)          !

             IF FLD.END THEN BEGIN               ! If field end
               FLD.LEN = (FLD.END -2)            \ Adjust pointer
                       - FLD.START               !
             ENDIF ELSE BEGIN                    ! else use blank or EOL
               FLD.END = MATCH(" ", FC.TEMP1$,   \ look for blank in line
                               FLD.START)        !
               IF FLD.END THEN BEGIN             ! If blank found
                 FLD.LEN = (FLD.END -2)          \ Adjust pointer
                         - FLD.START             !
               ENDIF ELSE BEGIN                  ! otherwise if no blank found
                 FLD.END = EOL                   ! Use End of Line as Field End
                 FLD.LEN = (FLD.END -1)          \ adjust pointer
                         - FLD.START             !
               ENDIF                             ! blank found
               IF FLD.END = 0 THEN BEGIN         ! if no field end found
                 ERROR.TYPE$ = "903"             ! Set Record 90, Field 3 error
                 RD.ISO.FILE = 0                 ! Hard error, must exit
                 FIELD.ERROR = -1                ! set field error flag
               ENDIF                             ! no field end found
             ENDIF                               ! field end
           ENDIF                                 ! no field error yet
         ENDIF                                   ! field end found

         IF FIELD.ERROR = 0 THEN BEGIN           ! if no field error
           FC.SYMBOL$ = MID$(FC.TEMP1$,          \ get FC Symbol
                             FLD.START +1,       \ Remove double quotes from
                             FLD.LEN)            !  string.
         ENDIF                                   ! no symbol found
         IF FC.SYMBOL$ = "" THEN BEGIN           ! if no symbol
           FC.SYMBOL$ = "0"                      ! set symbol to 0
         ENDIF                                   ! no symbol

         MC.ISO.ARR$(SLOT, 3) = FC.SYMBOL$       ! Set curr num into array

         IF ERROR.TYPE$ <> "" THEN BEGIN         ! if Error type to log
           WORK$  = "EX01" +                     \ Module EAMEXCHG
                    "R" + LEFT$(ERROR.TYPE$, 2) +\ Record Number
                    "-" + RIGHT$(ERROR.TYPE$, 1) ! Field Number
           WORK1I2 = ADXERROR(0,ASC("B"),429,1,  \ log the error
                              75,WORK$)          !
           ERROR.TYPE$ = ""                      ! reset the error type flag
         ENDIF                                   ! error type to log
       ENDIF                                     ! read first line and
                                                 !  no error.
     ENDIF                                       ! Not a blank line
   ENDIF                                         ! not EOF detected
 WEND                                            ! while no error detected

 CLOSE RF.SESS%                                  ! Close the session
 FIELD.ERROR = 0

!*****************************************************************************
!*                                                                           *
!*   This section attempts to read the file "EAMCDESC" file and puts the     *
!*  information away in the FC.DESC.ARR$ array.                              *
!*                                                                           *
!*****************************************************************************
!
 RD.EAMCDESC.FILE:

 TS.ER.RETURN = -1                               ! Set user will handle flag
 TS.TS11.WERR$ = ""                              ! reset error work variable

 FILE.NAME$ = "EAMCDESC"                         ! set file name to use
 EAMCDESC.PRESENT = SIZE(FILE.NAME$)             ! get size of file
 IF EAMCDESC.PRESENT NE 0 THEN BEGIN             ! if descriptor file present
!AIR40156 Correct number of records
!  NUM.DESCS = (EAMCDESC.PRESENT / 49) + 5       ! Calculate number of entries
   NUM.DESCS = (EAMCDESC.PRESENT / 49)           ! Calculate number of entries
!EIR40156
 ENDIF                                           ! descriptor file present

!AIR40156
!OPEN FILE.NAME$ AS RF.SESS% NOWRITE NODEL       ! Get MC Descriptors File
 OPEN FILE.NAME$ RECL 49 AS RF.SESS%             \ Open File
                             NOWRITE NODEL       !
!EIR40156
 IF NOT(TS.ER.RETURN) THEN BEGIN                 ! if no error detected
   MC.ENABLED = 0                                ! reset feature flag
   GOTO MC.DONE                                  ! exit
 ENDIF                                           ! no error detected
!DESC.READ = -1                                  ! set loop file IR40235
 DIM FC.DESC.ARR$(NUM.DESCS,1)                   ! Dim the Descriptor Array
 FC.DESC.ARR$(0,0) = STR$(NUM.DESCS)             ! Place Descriptor count in Array

 TS.TS11.WERR$ = ""                              ! set error work variable
 TS.ER.RETURN = -1                               ! set user will handle flag
 FC.L = 1                                        ! set initial value
 EOF.DETECTED = 0                                ! Reset End Of File Detected

!AIR40156 Read the descriptors
!WHILE (DESC.READ)                               ! while descriptor read flag
!
!
!    WHILE NOT(EOF.DETECTED)                     ! while not End of File
!      READ #RF.SESS%; LINE FC.TEMP1$            ! read a descriptor line
!
!      IF TS.ER.RETURN THEN BEGIN                ! if no error detected
!        EOL = LEN(FC.TEMP1$)                    ! set End Of Line pointer
!
!        IF (LEFT$(FC.TEMP1$, 1) <> "!") AND     \ If NOT a Remark line and
!         (LEFT$(FC.TEMP1$, 1) <> "\") AND       \  NOT a blank line.
!         (FC.TEMP1$ <> "") THEN BEGIN           !
!
!          FLD.START = 1                         ! set field start pointer
!          FLD.END = MATCH(",", FC.TEMP1$,       \ find the field end
!                          FLD.START)            !
!
!          IF FLD.END THEN BEGIN                 ! If field end
!            FLD.LEN = (FLD.END -2) - FLD.START  ! Adjust pointer
!          ENDIF ELSE BEGIN                      ! else if no field end
!            FLD.END = MATCH(" ", FC.TEMP1$,     \ look for a blank in the line
!                            FLD.START)          !
!            IF FLD.END THEN BEGIN               ! If blank found
!              FLD.LEN = (FLD.END -2)            \ Adjust pointer
!                      - FLD.START               !
!            ENDIF ELSE BEGIN                    ! otherwise if no blank found
!              FLD.END = EOL                     ! Use End of Line as Field End
!              FLD.LEN = (FLD.END -1)            \ Adjust pointer
!                      - FLD.START               !
!            ENDIF                               ! blank found
!          ENDIF                                 ! field end found
!
!          IF FC.L = 4 THEN BEGIN                ! if descriptor 4
!            PM.1.DESC$ = MID$(FC.TEMP1$,        \ get descriptor
!                              FLD.START +1,     \ Remove doublequotes from
!                              FLD.LEN)          !  string.
!            PM.1.DESC$ = LEFT$(PM.1.DESC$,31)   ! just left hand 31 characters
!          ENDIF                                 ! descriptor 4
!          IF FC.L = 5 THEN BEGIN                ! descriptor 5
!            PM.26.DESC$ = MID$(FC.TEMP1$,       \ get descriptor
!                               FLD.START +1,    \ Remove double quotes from
!                               FLD.LEN)         !  string.
!            PM.26.DESC$ = LEFT$(PM.26.DESC$,31) ! just left hand 31 characters
!          ENDIF                                 ! descriptor 5
!          IF FC.L = 6 THEN BEGIN                ! else if descriptor 6
!            PM.345.DESC$ = MID$(FC.TEMP1$,      \ get descriptor
!                                FLD.START +1,   \ Remove double quotes from
!                                FLD.LEN)        !  string.
!            PM.345.DESC$ =                      \ just left hand 31 characters
!                          LEFT$(PM.345.DESC$,31)!
!          ENDIF                                 ! descriptor 6
!          IF FC.L = 51 THEN BEGIN               ! if descriptor 51
!            FC.NOT.FND.MSG$ = MID$(FC.TEMP1$,   \ get descriptor
!                              FLD.START +1,     \ remove double quotes from
!                              FLD.LEN)          !  string.
!          ENDIF                                 ! descriptor 51
!
!          FC.DESC.ARR$(FC.L,0)                  \ get descriptor and remove
!                 = MID$(FC.TEMP1$,              \ double quotes from string.
!                        FLD.START +1, FLD.LEN)  !
!
!          FLD.START = FLD.END +1                ! point to start of next field
!          FLD.END = MATCH(",", FC.TEMP1$,       \ find field end
!                          FLD.START)            !
!
!          IF FLD.END THEN BEGIN                 ! If field end
!            FLD.LEN = (FLD.END -2) - FLD.START  ! Adjust pointer
!          ENDIF ELSE BEGIN                      ! else if no field end
!            FLD.END = MATCH(" ", FC.TEMP1$,     \ look for blank
!                            FLD.START)          !
!            IF FLD.END THEN BEGIN               ! If blank found
!              FLD.LEN = (FLD.END -2)            \ Adjust pointer
!                      - FLD.START               !
!            ENDIF ELSE BEGIN                    ! otherwise if no blank found
!              FLD.END = EOL                     ! Use End of Line as Field End
!            ENDIF                               ! blank found
!          ENDIF                                 ! field end
!
!          FC.DESC.ARR$(FC.L, 1)                 \ get descriptor length
!                 = MID$(FC.TEMP1$,              \ and remove double quotes
!                        FLD.START +1,FLD.LEN)   ! from string.
!
!          FC.L = FC.L + 1                       ! bump array position pointer
!
!        ENDIF ELSE BEGIN                        ! else if a remark line
!          FC.TEMP1$ = ""                        ! reset work string
!        ENDIF                                   ! not a remark line
!        IF FC.L > NUM.DESCS THEN BEGIN          ! if all descriptors read
!          EOF.DETECTED = -1                     ! force an End of File
!        ENDIF                                   ! all descriptors read
!      ENDIF ELSE BEGIN                          ! if error detected
!        EOF.DETECTED = -1                       ! set End Of File to exit
!        DESC.READ = 0                           ! reset loop flag
!        FC.L = NUM.DESCS +1                     ! reset loop flag
!      ENDIF                                     ! no error detected
!    WEND                                        ! while not End Of File
!WEND                                            ! while read descriptor flag

 FOR FC.L = 1 TO NUM.DESCS
   READ # RF.SESS%, FC.L; FC.DESC.ARR$(FC.L,0),  \ Descriptor &
                          FC.DESC.ARR$(FC.L,1)   !  length
 NEXT FC.L

 ! Set specific descriptors
 PM.1.DESC$ = LEFT$(FC.DESC.ARR$(4,0), 31)       ! PBC
 PM.26.DESC$ = LEFT$(FC.DESC.ARR$(5,0), 31)      ! ABC descriptor
 PM.345.DESC$ = LEFT$(FC.DESC.ARR$(6,0), 31)     ! Other Foreign Currs
 FC.NOT.FND.MSG$ = LEFT$(FC.DESC.ARR$(51,0), 31) ! Currency Not Found

!EIR40156
 CLOSE RF.SESS%                                  ! close the session


!*****************************************************************************
!*                                                                           *
!*   This section attempts to read the file "EAMEXCHG" file and puts the     *
!*  information away in the FCER.ARR$ array.                                 *
!*                                                                           *
!*****************************************************************************
!

 TS.ER.RETURN = -1                               ! Set user will handle flag
 TS.TS11.WERR$ = ""                              ! reset error work variable
 CREATE.EXCHG.FILE = 0                           ! reset create file flag


 FILE.NAME$ = "EAMEXCHG"                         ! file to open

!AIR43567
!OPEN FILE.NAME$ AS RF.SESS% NOWRITE NODEL       ! Get FC Exchange Rate File
 OPEN FILE.NAME$ DIRECT RECL 512 AS RF.SESS% NOWRITE NODEL
!EIR43567
 TS.TS11.WERR$ = ""                              ! set error work variable
 TS.ER.RETURN = -1                               ! set user will handle flag
 IF NOT(CREATE.EXCHG.FILE) THEN BEGIN            ! if no exchange rate file
   EAMEXCHG.PRESENT = -1                         ! set EAMEXCHG present flag

   RD.EXCHG.FILE = -1                            ! Set loop flag

!AIR43567
!  WHILE (RD.EXCHG.FILE)                         ! Loop while records ok
!
!    FC.TEMP1$ = ""                              ! reset work string
!    ERROR.TYPE$ = ""                            ! reset error type flag
!    FIELD.ERROR = 0                             ! reset field error flag
!
!    READ #RF.SESS%; LINE FC.TEMP1$              ! Read FC EXCHANGE RATE LINE
!
!    IF TS.ER.RETURN THEN BEGIN                  ! if no error detected
!
!      IF (LEFT$(FC.TEMP1$, 1) <> "!") AND       \ If NOT a Remark line and
!       (LEFT$(FC.TEMP1$, 1) <> "\") AND         \  NOT a blank line.
!       (FC.TEMP1$ <> "") THEN BEGIN             !
!
!        FLD.START = 1                           ! set field start pointer
!        FLD.END = MATCH(",", FC.TEMP1$,         \ find the field end
!                        FLD.START)              !
!
!        RECORD.TYPE = 0                         ! reset record type
!        IF FLD.END = 0 THEN BEGIN               ! if field end not found
!          ERROR.TYPE$ = "RT0"                   ! Set Record Type error
!          RD.EXCHG.FILE = 0                     ! reset loop flag
!          FIELD.ERROR = -1                      ! Missing ending Comma
!        ENDIF ELSE BEGIN                        ! else if field end found
!          REC.TYPE$ = UNPACK$(MID$(FC.TEMP1$,   \ get record type
!                      FLD.START,                \
!                      FLD.END - FLD.START))     !
!          RECORD.TYPE = INT%(VAL(REC.TYPE$))    ! make into integer
!        ENDIF                                   ! field end not found
!        IF RECORD.TYPE = 10 THEN BEGIN          ! FC record count
!
!          FLD.START = FLD.END + 1               ! point to next field
!          FLD.END = MATCH(",", FC.TEMP1$,       \ find end of field
!                          FLD.START)            !
!
!          IF FLD.END = 0 THEN BEGIN             ! if no field end found
!            ERROR.TYPE$ = "101"                 ! Set Record 10, Field 1 error
!            RD.EXCHG.FILE = 0                   ! Hard error, must exit
!            FIELD.ERROR = -1                    ! reset field error flag
!          ENDIF ELSE BEGIN                      ! no field end found
!            NUM.CURR$ = UNPACK$(MID$(FC.TEMP1$, \ get number of currencies
!                      FLD.START,                \  defined.
!                      FLD.END - FLD.START))     !
!            IF LEN(NUM.CURR$) = 0 THEN BEGIN    ! if no currencies defined
!              ERROR.TYPE$ = "101"               ! Set Record 10, Field 1 error
!              RD.EXCHG.FILE = 0                 ! Hard error, must exit
!              FIELD.ERROR = -1                  ! set field error flag
!            ENDIF ELSE BEGIN                    ! else if some currencies
!              NUM.FCSA = VAL(NUM.CURR$)         ! make an integer
!
!              DIM FCER.ARR$(NUM.FCSA, 15)       ! Dim FC Exchange Array
!              FCER.ARR$(0,0) = "0"              ! set currency count
!
!              DIM TTAR.ARR$(NUM.FCSA, 36)       ! Dim Tender Type/Var. Array
!              FOR L = 0 TO NUM.FCSA             ! loop through TTAR array
!                FOR J = 1 TO 36                 ! loop through fields
!                  TTAR.ARR$(L,J) = "0"          ! initialize the field
!                NEXT J                          ! next field
!              NEXT L                            ! next array entry
!              EAMEXCHG.PROCESSED = -1           ! Indicate processing Started
!            ENDIF                               ! some currencies defined
!          ENDIF                                 ! no field end
!        ENDIF                                   ! End Rec type 10 proc.
!
!        IF RECORD.TYPE = 20 THEN BEGIN          ! EXCHANGE RATE RECORD
!
!          SLOT = VAL(FCER.ARR$(0,0)) + 1        ! Find next open position
!
!          FLD.START = FLD.END + 1               ! point to start of field
!          FLD.END = MATCH(",", FC.TEMP1$,       \  find field end.
!                          FLD.START)            !
!
!          IF FLD.END = 0 THEN BEGIN             ! if no field end found
!            ERROR.TYPE$ = "201"                 ! Set Record 20, Field 1 error
!            FIELD.ERROR = -1                    ! set field error flag
!          ENDIF ELSE BEGIN                      ! else if field end found
!
!            CURR.KEY.CODE$                      \ get Short Cut Key
!                = UNPACK$(MID$(FC.TEMP1$,       \
!                          FLD.START,            \
!                         FLD.END - FLD.START))  !
!           IF CURR.KEY.CODE$ <> "" THEN BEGIN   ! if shortcut key found
!             FCER.ARR$(0,0) = STR$(SLOT)        ! Set Position taken
!             FCER.ARR$(SLOT, 1) =               \ put it away
!                       CURR.KEY.CODE$           !
!            ENDIF ELSE BEGIN                    ! else if no shortcut key
!              ERROR.TYPE$ = "201"               ! Set Record 20, Field 1 error
!              FIELD.ERROR = -1                  ! set field error flag
!            ENDIF                               ! shortcut key found
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! no field error detected
!              FLD.START = FLD.END + 1           ! point to start of next field
!              IF MID$(FC.TEMP1$,                \ if first char is not a
!                      FLD.START, 1) NE          \  double quote
!                      CHR$(22H) THEN BEGIN      !
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!              ENDIF ELSE BEGIN                  ! else if double quote found
!                FLD.START = FLD.START +1        ! point to next char position
!                FLD.END = MATCH(CHR$(22H),      \ find next double quote
!                          FC.TEMP1$, FLD.START) !
!              ENDIF                             ! 1st char is a dbl quote
!            ENDIF                               ! field error detected
!
!            IF FLD.END = 0 THEN BEGIN           ! if no field end found
!              ERROR.TYPE$ = "202"               ! Set Record 20, Field 2 error
!              FIELD.ERROR = -1                  ! set field error flag
!            ENDIF ELSE BEGIN                    ! else if field end found
!              FCNAME$ = MID$(FC.TEMP1$,         \ get Foreign Currency
!                           FLD.START,           \  Name.
!                           FLD.END - FLD.START) !
!              FCER.ARR$(SLOT, 2) = FCNAME$      ! Set FC Name into array
!
!              FLD.END = MATCH(",", FC.TEMP1$,   \ find field end
!                              FLD.START)        !
!              FLD.START = FLD.END + 1           ! point to start of next field
!              FLD.END = MATCH(",", FC.TEMP1$,   \ find field end
!                              FLD.START)        !
!
!              IF FLD.END = 0 THEN BEGIN         ! if no field end found
!                ERROR.TYPE$ = "203"             ! Set Record 20, Field 3 error
!                FIELD.ERROR = -1                ! set field error flag
!              ENDIF                             ! no field end found
!            ENDIF                               ! field end found
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error
!              CMCICODE$ = MID$(FC.TEMP1$,       \ get Country Monetary Code ID
!                          FLD.START,            \
!                          FLD.END - FLD.START)  !
!              IF LEN(CMCICODE$) = 0 THEN BEGIN  ! if no CMCI Code found
!                ERROR.TYPE$ = "203"             ! Set Record 20, Field 3 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if CMCI code found
!                FCER.ARR$(SLOT, 3) =            \ put it away
!                    RIGHT$("  " + CMCICODE$, 3) !
!
!                FLD.START = FLD.END + 1         ! point to next record
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "204"           ! Set Record 20, Field 4 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! CMCI code found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error found
!              CURR.NUM$ = UNPACK$(MID$(         \ get Currency number
!                          FC.TEMP1$,            \
!                          FLD.START,            \
!                          FLD.END - FLD.START)) !
!              IF LEN(CURR.NUM$) = 0 THEN BEGIN  ! if no currency number found
!                ERROR.TYPE$ = "204"             ! Set Record 20, Field 4 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if no curr. num. found
!AIR40090
!                CURR.NUM$ = RIGHT$("0000" +     \ Normalize to 4 digits
!                                   CURR.NUM$,4) !
!EIR40090
!                FCER.ARR$(SLOT, 4) = CURR.NUM$  ! Set curr num into array
!
!                FLD.START = FLD.END + 1         ! poing to next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find end of field
!                                FLD.START)      !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "205"           ! Set Record 20, Field 5 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! currency number found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!              PROC.METHOD$ = UNPACK$(MID$(      \ get processing method
!                         FC.TEMP1$, FLD.START,  \
!                         FLD.END - FLD.START))  !
!              IF LEN(PROC.METHOD$) =            \ if no processing method
!                                   0 THEN BEGIN !  found.
!                ERROR.TYPE$ = "205"             ! Set Record 20, Field 5 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if PM found
!                FCER.ARR$(SLOT, 5) =            \ set Currency Processing
!                                   PROC.METHOD$ !  Method.
!                IF PROC.METHOD$ = "1" THEN BEGIN! If Primary Base Currency
!                  FCER.ARR$(SLOT, 15) =         \ set PBC Descriptor
!                                     PM.1.DESC$ !  descriptor.
!                ENDIF                           ! Primary Base Currency
!                IF (PROC.METHOD$ = "2") OR      \ if Alt Base Currency
!                 (PROC.METHOD$ = "6") THEN BEGIN!
!                  FCER.ARR$(SLOT,15) =          \ set Alt Base Currency
!                                    PM.26.DESC$ !  descriptor.
!                ENDIF                           ! Alt Base Currency
!                IF (PROC.METHOD$ = "3") OR      \ if Processing Method 3
!                 (PROC.METHOD$ = "4") OR        \  or Processing Method 4
!                 (PROC.METHOD$ = "5") THEN BEGIN!  or Processing Method 5
!                  FCER.ARR$(SLOT,15) =          \ set FC descriptor
!                                   PM.345.DESC$ !  descriptor.
!                ENDIF                           ! PM 3, 4 or 5
!
!                FLD.START = FLD.END + 2         ! Point to start of next field (Skip over Double Quote)
!                FLD.END = MATCH(CHR$(22H),      \ find end of field
!                          FC.TEMP1$, FLD.START) !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "206"           ! Set Record 20, Field 6 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! PM found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!              EXCHRATE$ = MID$(FC.TEMP1$,       \ get Exchange Rate
!                          FLD.START,            \
!                          FLD.END - FLD.START)  !
!              FLD.END = FLD.END + 1             ! find field end
!              IF LEN(EXCHRATE$) = 0 THEN BEGIN  ! if no exchange rate found
!                ERROR.TYPE$ = "206"             ! Set Record 20, Field 6 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if exchange rate found
!                FCER.ARR$(SLOT, 6) = EXCHRATE$  ! Set exchg rate into array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "207"           ! Set Record 20, Field 7 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! exchange rate found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!              DECFLAG$ = MID$(FC.TEMP1$,        \ get Deciaml Format
!                         FLD.START,             \  Indicator.
!                         FLD.END - FLD.START)   !
!              IF LEN(DECFLAG$) = 0 THEN BEGIN   ! no decimal flag found
!                ERROR.TYPE$ = "207"             ! Set Record 20, Field 7 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if decimal flag found
!                FCER.ARR$(SLOT, 7) = DECFLAG$   ! Set Dec Curr flag into array
!
!                FLD.START = FLD.END + 1         ! point to next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find end of field
!                                FLD.START)      !
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "208"           ! Set Record 20, Field 8 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! deciaml flag found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!              LOANABLE$ = MID$(FC.TEMP1$,       \ get loanable flag
!                          FLD.START,            \
!                          FLD.END - FLD.START)  !
!              IF LEN(LOANABLE$) = 0 THEN BEGIN  ! if no loanable flag found
!                ERROR.TYPE$ = "208"             ! Set Record 20, Field 8 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if loanable flag found
!                FCER.ARR$(SLOT, 8) = LOANABLE$  ! Set Loanable flag into array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "209"           ! Set Record 20, Field 9 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! loanable flag found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!
!              FC.SYMBOL$ = UNPACK$(MID$(        \ get Currency Symbol
!                           FC.TEMP1$,           \
!                           FLD.START,           \
!                           FLD.END - FLD.START))!
!              IF LEN(FC.SYMBOL$) = 0 THEN BEGIN ! if no symbol found
!                ERROR.TYPE$ = "209"             ! Set Record 20, Field 9 error
!                FIELD.ERROR = -1                ! set field error flag
!              ENDIF ELSE BEGIN                  ! else if symbol found
!                FCER.ARR$(SLOT, 9) = FC.SYMBOL$ ! Set Curr. Symbol into array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "210"           ! Set Record 20, Field 10 error
!                  FIELD.ERROR = -1              ! set field error flag
!                ENDIF                           ! no field end found
!              ENDIF                             ! currency symbol found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!
!              AUTHLEVEL$ = UNPACK$(MID$(        \ get Change Authorization
!                           FC.TEMP1$,           \  level.
!                           FLD.START,           \
!                           FLD.END - FLD.START))!
!              IF LEN(AUTHLEVEL$) = 0 THEN BEGIN ! if no auth. level found
!                ERROR.TYPE$ = "210"             ! Set Record 20, Field 10 error
!                FIELD.ERROR = -1                ! set field error flag
!              ENDIF ELSE BEGIN                  ! else if auth. level found
!                FCER.ARR$(SLOT, 10) = AUTHLEVEL$! Set Auth Lev flag into array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "211"           ! Set Record 20, Field 11 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! auth. level found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!
!              CHKINDFLD$ = UNPACK$(MID$         \ get Check Indicator Field
!                           (FC.TEMP1$,          \
!                           FLD.START,           \
!                           FLD.END - FLD.START))!
!              IF (LEN(CHKINDFLD$) > 0) AND      \ If field marked and
!               ((VAL(CHKINDFLD$) < 0) OR        \  invalid field entered.
!                (VAL(CHKINDFLD$) > 3))          \
!                                     THEN BEGIN !
!                ERROR.TYPE$ = "211"             ! Set Record 20, Field 11 error
!                FIELD.ERROR = -1                ! set field error flag
!              ENDIF ELSE BEGIN                  ! else field, and in range
!                FCER.ARR$(SLOT, 11) = CHKINDFLD$! Set Check Ind Fld into array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                FLD.END = MATCH(",",            \ find field end
!                          FC.TEMP1$, FLD.START) !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "212"           ! Set Record 10, Field 12 error
!                  FIELD.ERROR = -1              ! set field error flag
!                ENDIF                           ! no field end found
!              ENDIF                             ! Check Ind. field found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!
!              CHKINDOFF$ = UNPACK$(MID$         \ get Check Indicator offset
!                           (FC.TEMP1$,          \
!                           FLD.START,           \
!                           FLD.END - FLD.START))!
!              IF LEN(CHKINDOFF$) = 0 THEN BEGIN ! if no check ind. offset found
!                ERROR.TYPE$ = "212"             ! Set Record 20, Field 12 error
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if chk ind. offset found
!                FCER.ARR$(SLOT, 12) = CHKINDOFF$! Set offset into array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                FLD.END = MATCH(",", FC.TEMP1$, \ find field end
!                                FLD.START)      !
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "213"           ! Set Record 20, Field 13 error
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! Check Ind. off. found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!
!              CHECKIND$ = UNPACK$(MID$          \ get Check Indicator
!                          (FC.TEMP1$,           \
!                          FLD.START,            \
!                          FLD.END - FLD.START)) !
!              IF LEN(CHECKIND$) = 0 THEN BEGIN  ! if no check indicator found
!                ERROR.TYPE$ = "213"             ! Set Record 20, Field 13 error
!                FIELD.ERROR = -1                ! set field error flag
!              ENDIF ELSE BEGIN                  ! else if check indicator found
!                FCER.ARR$(SLOT, 13) = CHECKIND$ ! Set Chk Ind into Array
!
!                FLD.START = FLD.END + 1         ! point to start of next field
!                IF MID$(FC.TEMP1$,              \ if first character is not a
!                        FLD.START,1) NE         \ double quote
!                        CHR$(22H) THEN BEGIN    !
!                  FLD.END = MATCH(",",          \ look for the field end
!                                  FC.TEMP1$,    \
!                                  FLD.START)    !
!                ENDIF ELSE BEGIN                ! else if it is a dbl quote
!                  FLD.START = FLD.START +1      ! point to next character
!                  FLD.END = MATCH(CHR$(22H),    \ find field end
!                            FC.TEMP1$,          \
!                            FLD.START)          !
!                ENDIF                           ! 1st char. is dbl quote
!
!                IF FLD.END = 0 THEN BEGIN       ! if no field end found
!                  ERROR.TYPE$ = "214"           ! Set Record 20, Field 14 error
!                  FIELD.ERROR = -1              !  set field error
!                ENDIF                           ! no field end found
!              ENDIF                             ! Check Indicator found
!            ENDIF                               ! no field error
!
!            IF FIELD.ERROR = 0 THEN BEGIN       ! if no field error yet
!
!              USERDATA$ = MID$(FC.TEMP1$,       \ get User Data Field
!                          FLD.START,            \
!                          FLD.END - FLD.START)  !
!              FCER.ARR$(SLOT, 14) = USERDATA$   ! Set User Data into array
!            ENDIF                               ! no field error
!          ENDIF                                 ! field end found
!        ENDIF                                   ! Rec type 20 processing
!
!        IF RECORD.TYPE = 30 THEN BEGIN          ! Tendier Acceptance Record
!
!         RECORD.LEN = LEN(FC.TEMP1$)            ! get record length
!         FLD.START = FLD.END + 1                ! point to start of next field
!         FLD.END = MATCH(",", FC.TEMP1$,        \ find field end
!                         FLD.START)             !
!
!          IF FLD.END = 0 THEN BEGIN             ! if no field end found
!            ERROR.TYPE$ = "301"                 ! Set Record 30, Field 1 error
!            FIELD.ERROR = -1                    ! set field error
!          ENDIF ELSE BEGIN                      ! else if field end found
!
!            FLD.NUM = 0                         ! reset field number
!            FLD.END = MATCH(",", FC.TEMP1$,     \ find field end
!                            FLD.START)          !
!            WHILE ((FLD.END <=                  \
!                            LEN(FC.TEMP1$)) AND \ while not at end of line
!                   (FLD.END NE 0))              !
!              FIELD.ERROR = 0                   ! reset field error flag
!              FLD.NUM = FLD.NUM +1              ! bump field number
!
!              IF FLD.END = 0 THEN BEGIN         ! if no field end found
!                ERROR.TYPE$ = "30" +            \ set Record 30, field n error
!                              STR$(FLD.NUM)     !
!                FIELD.ERROR = -1                ! set field error
!              ENDIF ELSE BEGIN                  ! else if field end found
!                                                ! Type/Variety Definition
!                TVADEF$ = UNPACK$(MID$          \ get Tender Type/Variety
!                          (FC.TEMP1$,           \  acceptance definition
!                          FLD.START,            \
!                          FLD.END - FLD.START)) !
!                IF LEN(TVADEF$) <> 2 THEN BEGIN ! if more than 2 characters
!                  ERROR.TYPE$ = "30" +          \ Set Rec 30, Field n error
!                                 STR$(FLD.NUM)  !
!                  FIELD.ERROR = -1              ! set field error
!                ENDIF ELSE BEGIN                ! else if more than 2 chars.
!                  FC.TTYPE$ = LEFT$(TVADEF$,1)  ! Pull Tender Type
!                  FC.TVAR$ = MID$(TVADEF$,2,1)  ! Pull Tender Variety
!
!                  J = ((VAL(FC.TTYPE$)-1) *6) + \ set array index pointer
!                      VAL(FC.TVAR$)             !
!
!                  TTAR.ARR$(SLOT, J) = "1"      ! Set into array
!
!                  FLD.START = FLD.END + 1       ! point to start of next field
!                  FLD.END = MATCH(",",          \ find field end
!                                  FC.TEMP1$,    \
!                                  FLD.START)    !
!                ENDIF                           ! more than 2 characters
!              ENDIF                             ! field end found
!              IF ERROR.TYPE$ <> "" THEN BEGIN   ! Error to log
!                WORK$  = "EX64" + "R" +         \ Module EAMEXCHG
!                          LEFT$(ERROR.TYPE$,2) +\ Record Number
!                          "-" +                 \
!                          RIGHT$(ERROR.TYPE$, 1)! Field Number
!                WORK1I2 = ADXERROR(0,ASC("B"),  \ log the error
!                                   429,1,       \
!                                   75,WORK$)    !
!                FIELD.ERROR = -1                ! set field error indicator
!              ENDIF                             ! error to log
!              IF FIELD.ERROR THEN BEGIN         ! if field error
!                FLD.END = 0                     ! reset loop flag
!              ENDIF                             ! field error
!            WEND                                ! while not at end of line
!          ENDIF                                 ! field end found
!        ENDIF                                   ! Rec type 30 proc.
!        IF ERROR.TYPE$ <> "" THEN BEGIN         ! Error to log
!          WORK$  = "EX64" + "R" +               \ Module EAMEXCHG
!                   LEFT$(ERROR.TYPE$, 2) +      \ Record Number
!                   "-" +                        \
!                   RIGHT$(ERROR.TYPE$, 1)       ! Field Number
!          WORK1I2 = ADXERROR(0,ASC("B"),        \ log the error
!                             429,1,75,WORK$)    !
!          FIELD.ERROR = -1                      ! set field error indicator
!        ENDIF                                   ! error to log
!      ENDIF                                     ! not blank or remark ln
!    ENDIF ELSE BEGIN                            ! else if error detected
!      RD.EXCHG.FILE = 0                         ! reset loop flag
!    ENDIF                                       ! no error detected
!  WEND                                          ! while read exchange records
   READ FORM "C512";#RF.SESS%, 1; FC.TEMP1$       ! Read first record of file
   FLD.START = 1                                 ! Start of search
   FLD.END   = MATCH(CHR$(3AH), FC.TEMP1$, FLD.START) ! Match for comma
   IF (FLD.END <> 0) THEN BEGIN                  ! Comma found
     NUM.FCSA  = VAL(LEFT$(FC.TEMP1$, FLD.END - 1))! Set number of currencies
   ENDIF ELSE BEGIN                              ! .no comma
     FIELD.ERROR = -1                            ! Set error
   ENDIF                                         ! .comma
   FLD.START = FLD.END + 1                       ! Increment start-next search
   FLD.END   = MATCH(CHR$(3AH), FC.TEMP1$, FLD.START)! Find next comma
   CASHBK$ =                                     \
       MID$(FC.TEMP1$,FLD.START,FLD.END - FLD.START) !Set flag
   IF (CASHBK$ = "Y") THEN BEGIN                 !
     CASHBACK.ALLOWED = -1                       \ CashBack flag
   ENDIF ELSE BEGIN                              !
     CASHBACK.ALLOWED = 0                        \ CashBack flag
   ENDIF                                         !
   IF (FIELD.ERROR) OR (NUM.FCSA = 0) THEN BEGIN ! Error or no currencies
     RD.EXCHG.FILE = 0                           ! Do not enter loop
   ENDIF ELSE BEGIN                              ! .no error
     DIM FCER.ARR$(NUM.FCSA,15)                  ! Dim array for FC
     DIM TTAR.ARR$(NUM.FCSA,36)                  ! Dim array for Tender
     DIM CPOP.ARR$(NUM.FCSA,8)                   ! Dim array for Check Printing
   ENDIF                                         ! .error

   FC.L = 1                                      ! Set loop variable
   WHILE ((RD.EXCHG.FILE) AND (FC.L <= NUM.FCSA)) ! No error/More currencies

     READ FORM "C512";#RF.SESS%, FC.L + 1; FC.TEMP1$       ! Read first record of file
     FLD.START = 1                               ! Start of search
     FOR I% = 1 TO  14                           ! All elements of array
       FLD.END = MATCH(CHR$(3AH),FC.TEMP1$,FLD.START) ! Find comma
       IF (FLD.END = 0) THEN BEGIN               ! No value in field
         FCER.ARR$(FC.L,I%) = " "                ! Set to a space
       ENDIF ELSE BEGIN                          ! .comma found
         FCER.ARR$(FC.L,I%) = MID$(FC.TEMP1$,     \ Set array element to
                  FLD.START, FLD.END - FLD.START)  ! value found
       ENDIF                                     ! .comma
       IF (I% = 5) THEN BEGIN                    ! Fifth element of array
         IF (FCER.ARR$(FC.L,I%) = "1") THEN BEGIN ! Proc. Method = 1
           FCER.ARR$(FC.L,15) = PM.1.DESC$       ! Set descriptor
         ENDIF ELSE BEGIN                        ! .not proc 1
           IF (FCER.ARR$(FC.L,I%) = "2") OR      \ Proc. Method = 2
              (FCER.ARR$(FC.L,I%) = "6") THEN BEGIN !Proc. Method = 6
             FCER.ARR$(FC.L,15) = PM.26.DESC$    ! Set descriptor
           ENDIF ELSE BEGIN                      ! .not proc 2/6
             IF(FCER.ARR$(FC.L,I%) = "3") OR     \ Proc. Method = 3
               (FCER.ARR$(FC.L,I%) = "4") OR     \ Proc. Method = 4
               (FCER.ARR$(FC.L,I%) = "5") THEN BEGIN ! Proc. Method = 5
               FCER.ARR$(FC.L,15) = PM.345.DESC$ ! Set descriptor
             ENDIF                               ! .pric 3/4/5
           ENDIF                                 ! .proc 2/6
         ENDIF                                   ! .proc 1
       ENDIF                                     ! .element 5
       FLD.START = FLD.END + 1                   ! Increment start-next search
     NEXT I%                                     ! .next element

     FOR I% = 1 TO  8                            ! All elements of array
       FLD.END = MATCH(CHR$(3AH),FC.TEMP1$,FLD.START)! Find comma
       IF (FLD.END = 0) THEN BEGIN               ! No comma found
         CPOP.ARR$(FC.L,I%) = " "                ! Set value to space
       ENDIF ELSE BEGIN                          ! .comma found
         CPOP.ARR$(FC.L,I%) = MID$(FC.TEMP1$,     \ Set array element to
                  FLD.START, FLD.END - FLD.START)  ! value found
       ENDIF                                     ! .comma
       FLD.START = FLD.END + 1                   ! Increment start-next search
     NEXT I%                                     ! .next element

     FOR I% = 1 TO  36                           ! All elements of array
       FLD.END = MATCH(CHR$(3AH),FC.TEMP1$,FLD.START)! Find comma
       IF (FLD.END = 0) THEN BEGIN               ! No comma found
         TTAR.ARR$(FC.L,I%) = " "                ! Set value to space
       ENDIF ELSE BEGIN                          ! .comma found
         TTAR.ARR$(FC.L,I%) = MID$(FC.TEMP1$,     \ Set array element to
                   FLD.START, FLD.END - FLD.START) ! value found
       ENDIF                                     ! .comma
       FLD.START = FLD.END + 1                   ! Increment start-next search
     NEXT I%                                     ! .next element
     FC.L = FC.L + 1                             ! Increment record number
   WEND                                          ! .more currencies
!EIR43567
 ENDIF                                           ! not create file flag
 CLOSE RF.SESS%                                  ! close the IO session
 ERROR.TYPE = 0                                  ! reset the error type
 FCER.ARR$(0,0) = STR$(NUM.FCSA)                 ! IR43663

 MC.DONE:                                        ! exit

!*************************************************************************
!                END OF INCLUDE : EAMMCRD1.J86
!*************************************************************************
